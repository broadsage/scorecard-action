name: Release Automation

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run - validate without creating release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       (github.event.pull_request.user.login == 'dependabot[bot]' ||
        contains(github.event.pull_request.labels.*.name, 'release') ||
        contains(github.event.pull_request.title, 'feat') ||
        contains(github.event.pull_request.title, 'fix') ||
        contains(github.event.pull_request.title, 'chore') ||
        github.event.pull_request.base.ref == 'main')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate Next Version
        id: version
        run: |
          # Get latest version tag
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          
          # Extract version numbers
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=0
            MINOR=0
            PATCH=0
          fi
          
          # Calculate new version based on input
          VERSION_TYPE="${{ inputs.version_type || 'patch' }}"
          case $VERSION_TYPE in
            major)
              NEW_VERSION="v$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "previous_version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $LATEST_TAG → $NEW_VERSION ($VERSION_TYPE)"

      - name: Generate Release Notes
        id: changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --verbose --tag ${{ steps.version.outputs.new_version }} --strip all ${{ steps.version.outputs.previous_version }}..${{ steps.version.outputs.new_version }}

      - name: Process Release
        if: ${{ inputs.dry_run != true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
          RELEASE_NOTES: ${{ inputs.release_notes }}
          CHANGELOG: ${{ steps.changelog.outputs.content }}
        run: |
          # Create version tag
          git tag -a "$NEW_VERSION" -m "chore: release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          # Create and push major version tag (GitHub Actions best practice)
          MAJOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f1)
          git tag -f "$MAJOR_VERSION" "$NEW_VERSION"
          git push origin "$MAJOR_VERSION" --force
          
          # Generate release notes
          if [[ -n "$RELEASE_NOTES" ]]; then
            # Use custom release notes if provided
            FINAL_NOTES="## 🚀 What's New

          $RELEASE_NOTES

          ---

          ### 🚀 Usage
          Update your workflows to use the latest version:
          \`\`\`yaml
          uses: broadsage/scorecard-action@$NEW_VERSION
          \`\`\`

          *This release was manually created via GitHub Actions workflow.*"
          else
            # Use git-cliff generated changelog
            FINAL_NOTES="$CHANGELOG"
          fi
          
          # Create GitHub release
          gh release create "$NEW_VERSION" \
            --title "$NEW_VERSION" \
            --notes "$FINAL_NOTES" \
            --latest
          
      - name: Dry Run Summary
        if: ${{ inputs.dry_run == true }}
        env:
          CHANGELOG: ${{ steps.changelog.outputs.content }}
        run: |
          echo "## 🧪 Dry Run Complete" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Validation successful - no release created**" >> $GITHUB_STEP_SUMMARY
          echo "**🔍 Trigger:** ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Dependabot' }}" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Version Type:** ${{ inputs.version_type || 'patch' }}" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Would create:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Generated Changelog Preview" >> $GITHUB_STEP_SUMMARY
          echo '```markdown' >> $GITHUB_STEP_SUMMARY
          echo "$CHANGELOG" | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Release Summary
        if: ${{ inputs.dry_run != true && success() }}
        run: |
          TRIGGER_DISPLAY="${{ github.event_name == 'workflow_dispatch' && '🖱️ Manual' || '🤖 Dependabot' }}"
          {
            echo "## 🎉 Release Complete"
            echo ""
            echo "**✅ Successfully created release:** ${{ steps.version.outputs.new_version }}"
            echo "**🔍 Trigger Type:** $TRIGGER_DISPLAY"
            echo "**📦 Version Type:** ${{ inputs.version_type || 'patch' }}"
            echo "${{ github.event_name == 'pull_request' && format('**📋 PR Processed:** {0}', github.event.pull_request.title) || '' }}"
            echo ""
            echo "### 🔗 Quick Links"
            echo "- [📋 View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }})"
            echo "- [🏠 Repository](https://github.com/${{ github.repository }})"
            echo "- [📊 Repository Insights](https://github.com/${{ github.repository }}/pulse)"
            echo ""
            echo "### 🚀 Next Steps"
            echo "The release is now live and ready for use. Update your workflows with:"
            echo "\`\`\`yaml"
            echo "uses: broadsage/scorecard-action@${{ steps.version.outputs.new_version }}"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY
          echo "🎯 Git Cliff release automation completed successfully!"
