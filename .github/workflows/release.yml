name: Release with GoReleaser

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  release:
    name: GoReleaser Release
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.version }}
      artifacts: ${{ steps.goreleaser.outputs.artifacts }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set Version
        id: version
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "üì¶ Tag Release: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate Action
        run: |
          echo "üîç Validating GitHub Action configuration..."
          
          # Basic YAML syntax validation
          if ! python3 -c "import yaml; yaml.safe_load(open('action.yml'))"; then
            echo "‚ùå action.yml has invalid YAML syntax"
            exit 1
          fi
          
          # Check required action fields
          if ! yq eval '.name' action.yml >/dev/null 2>&1; then
            echo "‚ùå action.yml missing 'name' field"
            exit 1
          fi
          
          if ! yq eval '.description' action.yml >/dev/null 2>&1; then
            echo "‚ùå action.yml missing 'description' field"
            exit 1
          fi
          
          if ! yq eval '.runs' action.yml >/dev/null 2>&1; then
            echo "‚ùå action.yml missing 'runs' field"
            exit 1
          fi
          
          echo "‚úÖ Action validation passed"

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: '1.21'

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: 'v2.4.1'

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.1.0
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_EXPERIMENTAL: 1

      - name: Generate Job Summary
        if: always()
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Mode:** üéØ Production Release" >> $GITHUB_STEP_SUMMARY
          
          VERSION="${{ steps.version.outputs.version }}"
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.goreleaser.outcome }}" == "success" ]]; then
            echo "**Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
            # Construct release URL manually
            if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
              RELEASE_TAG="${GITHUB_REF#refs/tags/}"
              echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${RELEASE_TAG}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "Update your workflows to use the new version:" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          echo "uses: broadsage/scorecard-action@$VERSION" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Update Major Version Tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract major version (e.g., v1.2.3 -> v1)
          if [[ $VERSION =~ ^v([0-9]+)\. ]]; then
            MAJOR_VERSION="v${BASH_REMATCH[1]}"
            
            echo "üìå Updating major version tag: $MAJOR_VERSION -> $VERSION"
            
            # Force update major version tag
            git tag -f "$MAJOR_VERSION" "$VERSION"
            git push origin "$MAJOR_VERSION" --force
            
            echo "‚úÖ Major version tag updated: $MAJOR_VERSION"
          else
            echo "‚ö†Ô∏è Could not extract major version from $VERSION"
          fi

  # Notify on completion
  notify:
    name: Notify Release
    needs: release
    runs-on: ubuntu-latest
    if: always() && needs.release.outputs.release_version != ''
    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "üéâ Successfully released ${{ needs.release.outputs.release_version }}"
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            RELEASE_TAG="${GITHUB_REF#refs/tags/}"
            echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${RELEASE_TAG}"
          fi
          
      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed for ${{ needs.release.outputs.release_version }}"
          exit 1