name: Release Automation

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    tags:
      - "v*.*.*"

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
      release_version: ${{ steps.version.outputs.new_version }}
      is_prerelease: ${{ contains(github.ref, '-') || contains(steps.version.outputs.new_version, '-') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate Next Version
        id: version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get latest version tag
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          
          # Extract version numbers
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=0
            MINOR=0
            PATCH=0
          fi
          
          # Calculate new version based on input
          VERSION_TYPE="${{ inputs.version_type || 'patch' }}"
          case $VERSION_TYPE in
            major)
              NEW_VERSION="v$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "previous_version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $LATEST_TAG → $NEW_VERSION ($VERSION_TYPE)"

      - name: Set Release Version from Tag
        id: tag_version
        if: github.event_name == 'push'
        run: |
          NEW_VERSION=${GITHUB_REF#refs/tags/}
          # Get previous version for changelog range
          LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | grep -v "^${NEW_VERSION}$" | head -1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          
          echo "previous_version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Tagged Release: $LATEST_TAG → $NEW_VERSION"

      - name: Generate Release Notes
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --no-exec --github-repo ${{ github.repository }}
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    needs: generate-changelog
    runs-on: ubuntu-latest
    if: always() && (needs.generate-changelog.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Version Tag
        if: github.event_name == 'workflow_dispatch'
        env:
          NEW_VERSION: ${{ needs.generate-changelog.outputs.release_version }}
        run: |
          # Create version tag
          git tag -a "$NEW_VERSION" -m "chore: release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          # Create and push major version tag (GitHub Actions best practice)
          MAJOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f1)
          git tag -f "$MAJOR_VERSION" "$NEW_VERSION"
          git push origin "$MAJOR_VERSION" --force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate-changelog.outputs.release_version || github.ref_name }}
          name: ${{ needs.generate-changelog.outputs.release_version || github.ref_name }}
          body: ${{ needs.generate-changelog.outputs.release_body }}
          prerelease: ${{ needs.generate-changelog.outputs.is_prerelease == 'true' }}
          make_latest: ${{ needs.generate-changelog.outputs.is_prerelease != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    name: Update CHANGELOG.md
    needs: [generate-changelog, create-release]
    runs-on: ubuntu-latest
    if: always() && (needs.create-release.result == 'success') && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update CHANGELOG.md
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --output CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit CHANGELOG.md
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md"
          else
            git add CHANGELOG.md
            git commit -m "chore: update CHANGELOG.md for ${{ needs.generate-changelog.outputs.release_version }}"
            git push origin main
          fi

  release-summary:
    name: Release Summary
    needs: [generate-changelog, create-release, update-changelog]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Summary
        run: |
          TRIGGER_DISPLAY="${{ github.event_name == 'workflow_dispatch' && '🖱️ Manual' || '🏷️ Tag Push' }}"
          VERSION="${{ needs.generate-changelog.outputs.release_version || github.ref_name }}"
          IS_PRERELEASE="${{ needs.generate-changelog.outputs.is_prerelease }}"
          
          {
            echo "## 🎉 Release Complete"
            echo ""
            echo "**✅ Successfully created release:** $VERSION"
            echo "**🔍 Trigger Type:** $TRIGGER_DISPLAY"
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "**📦 Version Type:** ${{ inputs.version_type }}"
            fi
            if [[ "$IS_PRERELEASE" == "true" ]]; then
              echo "**⚠️ Pre-release:** This is a pre-release version"
            fi
            echo ""
            echo "### 🔗 Quick Links"
            echo "- [📋 View Release](https://github.com/${{ github.repository }}/releases/tag/$VERSION)"
            echo "- [🏠 Repository](https://github.com/${{ github.repository }})"
            echo "- [📊 Repository Insights](https://github.com/${{ github.repository }}/pulse)"
            echo ""
            echo "### 🚀 Next Steps"
            echo "The release is now live and ready for use. Update your workflows with:"
            echo "\`\`\`yaml"
            echo "uses: ${{ github.repository }}@$VERSION"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY
          
          echo "🎯 Git Cliff release automation completed successfully!"