name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  semantic-release:
    name: Release & Publish
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Use standard token temporarily

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Import GPG key for verified commits/tags
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.AUTOBOT_GITHUB_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.AUTOBOT_GITHUB_GPG_PASSPHRASE }}
          fingerprint: ${{ secrets.AUTOBOT_GITHUB_GPG_FINGERPRINT }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_config_global: true
          git_committer_name: broadsage-autobot
          git_committer_email: broadsage-autobot@broadsage.com

      - name: Verify Action Configuration
        run: |
          echo "üîç Validating GitHub Action configuration..."
          
          # Basic YAML syntax validation  
          if command -v yq >/dev/null 2>&1; then
            yq eval '.' action.yml >/dev/null || { echo "‚ùå action.yml has invalid YAML syntax"; exit 1; }
          fi
          
          # Verify GPG setup
          echo "üîê Verifying GPG configuration..."
          gpg --list-secret-keys --keyid-format LONG || echo "‚ö†Ô∏è No GPG keys found"
          git config --global user.signingkey || echo "‚ö†Ô∏è No signing key configured"
          
          echo "‚úÖ Action configuration is valid"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: broadsage-autobot
          GIT_AUTHOR_EMAIL: broadsage-autobot@broadsage.com
          GIT_COMMITTER_NAME: broadsage-autobot
          GIT_COMMITTER_EMAIL: broadsage-autobot@broadsage.com
          # Enable GPG signing for semantic-release
          SEMANTIC_RELEASE_GPG_SIGN: "true"
        run: |
          echo "üöÄ Running semantic-release for GitHub Action..."
          echo "üìù Using committer: $(git config --global user.name) <$(git config --global user.email)>"
          
          # Configure GPG for semantic-release
          GPG_KEY_ID=$(git config --global user.signingkey)
          if [ -n "$GPG_KEY_ID" ]; then
            echo "üîê GPG Key ID: $GPG_KEY_ID"
            echo "üîê Enabling GPG signing for releases..."
            
            # Configure git for GPG signing with semantic-release
            git config --global commit.gpgsign true
            git config --global tag.gpgsign true
            git config --global gpg.program gpg
            
            # Test GPG signing
            echo "test" | gpg --clearsign > /dev/null && echo "‚úÖ GPG signing test passed" || echo "‚ö†Ô∏è GPG signing test failed"
          else
            echo "‚ö†Ô∏è No GPG signing key found, proceeding without GPG signatures"
            git config --global commit.gpgsign false
            git config --global tag.gpgsign false
          fi
          
          echo "üîê Final GPG config:"
          echo "  commit.gpgsign: $(git config --global commit.gpgsign)"
          echo "  tag.gpgsign: $(git config --global tag.gpgsign)"
          echo "  user.signingkey: $(git config --global user.signingkey)"
          
          npm run semantic-release

      - name: Generate Release Summary
        if: always()
        run: |
          echo "## üöÄ Semantic Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "### üì¶ Latest Release" >> $GITHUB_STEP_SUMMARY
            echo "Check the [releases page](https://github.com/${{ github.repository }}/releases) for the latest version." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Usage" >> $GITHUB_STEP_SUMMARY
            echo '```yaml' >> $GITHUB_STEP_SUMMARY
            echo "uses: ${{ github.repository }}@v{version}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi