name: Smart Release Workflow

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run - validate without creating release'
        required: false
        default: false
        type: boolean

jobs:
  smart-release:
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true && 
       github.event.pull_request.user.login == 'dependabot[bot]' &&
       contains(github.event.pull_request.labels.*.name, 'dependencies')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Release Environment
        run: |
          chmod +x .github/scripts/release.py
          echo "✅ Release utilities ready"

      - name: Process Smart Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRIGGER_TYPE: ${{ github.event_name }}
          VERSION_TYPE: ${{ inputs.version_type || 'patch' }}
          CUSTOM_NOTES: ${{ inputs.release_notes || '' }}
          DRY_RUN: ${{ inputs.dry_run || 'false' }}
          PR_TITLE: ${{ github.event.pull_request.title || '' }}
        run: |
          python3 .github/scripts/release.py
          
      - name: Collect Release Metrics
        if: success() && inputs.dry_run != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
          TRIGGER_EVENT: ${{ github.event_name }}
          VERSION_TYPE: ${{ env.VERSION_TYPE }}
        run: |
          # Record release event for metrics
          mkdir -p metrics
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          RELEASE_DATA=$(cat <<EOF
          {
            "timestamp": "$TIMESTAMP",
            "event_type": "release_created",
            "trigger": "$TRIGGER_EVENT",
            "version_type": "$VERSION_TYPE",
            "repository": "$REPOSITORY"
          }
          EOF
          )
          echo "$RELEASE_DATA" >> metrics/release_events.jsonl
          echo "📊 Release metrics recorded"

      - name: Release Summary
        if: success()
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "## 🧪 Dry Run Complete" >> $GITHUB_STEP_SUMMARY
            echo "**✅ Validation successful - no release created**" >> $GITHUB_STEP_SUMMARY
            echo "**🔍 Trigger:** ${TRIGGER_TYPE}" >> $GITHUB_STEP_SUMMARY
            echo "**📦 Version Type:** ${VERSION_TYPE}" >> $GITHUB_STEP_SUMMARY
          else
            LATEST_RELEASE=$(git tag -l "v*" --sort=-version:refname | head -1)
            TRIGGER_DISPLAY="${{ github.event_name == 'workflow_dispatch' && '🖱️ Manual' || '🤖 Dependabot' }}"
            {
              echo "## 🎉 Smart Release Complete"
              echo ""
              echo "**✅ Successfully created release:** $LATEST_RELEASE"
              echo "**🔍 Trigger Type:** $TRIGGER_DISPLAY"
              echo "**📦 Version Type:** ${VERSION_TYPE}"
              echo "${{ github.event_name == 'pull_request' && format('**📋 PR Processed:** {0}', github.event.pull_request.title) || '' }}"
              echo ""
              echo "### 🔗 Quick Links"
              echo "- [📋 View Release](https://github.com/${{ github.repository }}/releases/tag/$LATEST_RELEASE)"
              echo "- [🏠 Repository](https://github.com/${{ github.repository }})"
              echo "- [📊 Metrics Dashboard](https://github.com/${{ github.repository }}/blob/main/dashboard/index.html)"
              echo ""
              echo "### 🚀 Next Steps"
              echo "The release is now live and ready for use. Update your workflows with:"
              echo "\`\`\`yaml"
              echo "uses: broadsage/scorecard-action@v1"
              echo "\`\`\`"
            } >> $GITHUB_STEP_SUMMARY
          fi
          echo "🎯 Release workflow completed successfully!"
