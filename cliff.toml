# Git Cliff Configuration for Scorecard Action
# Migrated from Python release script with enhanced industry-standard features
# https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.
See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.

"""

# Template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
## 🚀 What's Changed

{%- macro render_commit(commit) -%}
    - {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}{%- if commit.links %} ({% for link in commit.links -%}[{{link.text}}]({{link.href}}){% if not loop.last %}, {% endif %}{%- endfor -%}){% endif -%}
{%- endmacro -%}

{%- if commits | filter(attribute="breaking") %}
### 💥 Breaking Changes
{% for commit in commits | filter(attribute="breaking") -%}
{{ self::render_commit(commit=commit) }}
{% endfor -%}
{% endif -%}

{%- if commits | filter(attribute="group", value="feat") %}
### ✨ New Features
{% for commit in commits | filter(attribute="group", value="feat") | filter(attribute="breaking", value=false) -%}
{{ self::render_commit(commit=commit) }}
{% endfor -%}
{% endif -%}

{%- if commits | filter(attribute="group", value="fix") %}
### 🐛 Bug Fixes
{% for commit in commits | filter(attribute="group", value="fix") -%}
{{ self::render_commit(commit=commit) }}
{% endfor -%}
{% endif -%}

{%- if commits | filter(attribute="group", value="perf") %}
### ⚡ Performance Improvements
{% for commit in commits | filter(attribute="group", value="perf") -%}
{{ self::render_commit(commit=commit) }}
{% endfor -%}
{% endif -%}

{%- if commits | filter(attribute="group", value="docs") %}
### 📚 Documentation
{% for commit in commits | filter(attribute="group", value="docs") -%}
{{ self::render_commit(commit=commit) }}
{% endfor -%}
{% endif -%}

{%- set refactor_commits = commits | filter(attribute="group", value="refactor") -%}
{%- set chore_commits = commits | filter(attribute="group", value="chore") -%}
{%- set ci_commits = commits | filter(attribute="group", value="ci") -%}
{%- set build_commits = commits | filter(attribute="group", value="build") -%}
{%- set style_commits = commits | filter(attribute="group", value="style") -%}
{%- set test_commits = commits | filter(attribute="group", value="test") -%}
{%- if refactor_commits or chore_commits or ci_commits or build_commits or style_commits or test_commits %}
### 🔧 Maintenance
{% for commit in refactor_commits -%}
- ♻️  {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% for commit in chore_commits -%}
- 🧹 {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% for commit in ci_commits -%}
- 👷 {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% for commit in build_commits -%}
- 📦 {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% for commit in style_commits -%}
- 💄 {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% for commit in test_commits -%}
- ✅ {% if commit.scope -%}**{{ commit.scope }}**: {%- endif -%}{{ commit.message | upper_first }}
{% endfor -%}
{% endif -%}

{%- set breaking_count = commits | filter(attribute="breaking") | length -%}
{%- set feat_count = commits | filter(attribute="group", value="feat") | filter(attribute="breaking", value=false) | length -%}
{%- set fix_count = commits | filter(attribute="group", value="fix") | length -%}
{%- set total_commits = commits | length -%}

{%- if total_commits > 0 %}
### 📊 Release Statistics
{%- if breaking_count > 0 %}
- **Breaking Changes**: {{ breaking_count }}
{%- endif -%}
{%- if feat_count > 0 %}
- **New Features**: {{ feat_count }}
{%- endif -%}
{%- if fix_count > 0 %}
- **Bug Fixes**: {{ fix_count }}
{%- endif -%}
- **Total Changes**: {{ total_commits }} commit{{ total_commits | pluralize }}

{%- endif %}

---

### 🚀 Usage
Update your workflows to use the latest version:
```yaml
uses: broadsage/scorecard-action@{{ version }}
```

*This release was automatically generated by Git Cliff.*

"""

# Changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# Remove the leading and trailing whitespace from the templates
trim = true

# Postprocessors to apply additional transformations
postprocessors = [
    # Clean up excessive newlines  
    { pattern = '\n{3,}', replace = '\n\n' },
    # Ensure proper emoji spacing
    { pattern = '([🎯🚀💥✨🐛⚡📚🔧📊])([^ ])', replace = '${1} ${2}' },
]

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out the commits that are not conventional
filter_unconventional = false
# Process each line of a commit as an individual commit
split_commits = false
# Regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove issue numbers from commit messages  
    { pattern = '\(#\d+\)', replace = '' },
    # Clean up merge commit messages
    { pattern = '^Merge pull request #\d+ from .+', replace = 'merge: pull request' },
    # Standardize Dependabot commit messages
    { pattern = '^Bump (.+) from (.+) to (.+)', replace = 'chore(deps): bump ${1} from ${2} to ${3}' },
]

# Regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "feat" },
    { message = "^fix", group = "fix" },
    { message = "^docs", group = "docs" },
    { message = "^perf", group = "perf" },
    { message = "^refactor", group = "refactor" },
    { message = "^style", group = "style" },
    { message = "^test", group = "test" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", group = "chore" },
    { message = "^chore|ci|build", group = "chore" },
    { message = "^revert", group = "revert" },
    # Parse breaking changes
    { message = ".*!", group = "feat", breaking = true },
    # Catch all for non-conventional commits
    { message = ".*", group = "chore" },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# Filter out the commits that are not matched by commit parsers
filter_commits = false
# Regex for matching git tags
tag_pattern = "v[0-9].*"
# Regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# Regex for ignoring tags
ignore_tags = ""
# Sort the tags topologically
topo_order = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# Limit the number of commits included in the changelog.
# limit_commits = 42

[bump]
# Configures automatic version bumping based on commit types
features_always_bump_minor = true
breaking_always_bump_major = true
custom_major_increment_regex = "^(feat|fix)!:"
custom_minor_increment_regex = "^feat"
custom_patch_increment_regex = "^fix"

[remote.github]
owner = "broadsage"
repo = "scorecard-action"